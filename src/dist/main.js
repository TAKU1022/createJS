/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ (function() {

eval("const stage = new createjs.Stage('canvas');\n\ncreatejs.Ticker.addEventListener('tick', () => {\n  stage.update();\n});\n\nclass CanvasBackground extends createjs.Shape {\n  constructor() {\n    super();\n\n    this.graphics.beginFill('#fff');\n    this.graphics.drawRect(0, 0, stage.canvas.width, stage.canvas.height);\n    stage.addChild(this);\n  }\n}\n\nclass CanvasImage extends createjs.Bitmap {\n  constructor() {\n    super();\n\n    this.image = new Image();\n    this.isDrawn = false;\n\n    this.onLoadImage();\n    this.handleDown();\n    this.handleMove();\n    stage.addChild(this);\n  }\n\n  onLoadImage() {\n    this.image.onload = () => {\n      this.isDrawn = true;\n      this.regX = this.image.width / 2;\n      this.regY = this.image.height / 2;\n      this.x = this.regX;\n      this.y = this.regY;\n    };\n  }\n}\n\nclass CanvasText extends createjs.Text {\n  constructor() {\n    super();\n\n    this.isDrawn = false;\n    this.text = '';\n    this.fontSize = 30;\n    this.fontFamily = 'sans-serif';\n    this.font = `${this.fontSize}px ${this.fontFamily}`;\n    this.dx = 0;\n    this.dy = 0;\n  }\n\n  chageFont(fontFamily) {\n    this.fontFamily = fontFamily;\n    this.font = `${this.fontSize}px ${this.fontFamily}`;\n  }\n}\n\nclass CanvasTextGroup extends createjs.Container {\n  constructor() {\n    super();\n\n    this.canvasText = new CanvasText();\n    this.addChild(this.canvasText);\n\n    this.closeButton = new createjs.Bitmap();\n    this.closeButton.image = new Image();\n    this.closeButton.image.onload = () => {\n      this.closeButton.x = this.canvasText.getBounds().width;\n    };\n    this.addChild(this.closeButton);\n\n    this.handleDown();\n    this.handleMove();\n    stage.addChild(this);\n  }\n}\n\nconst canvasOperation = {\n  dragPointX: null,\n  dragPointY: null,\n\n  handleDown() {\n    this.addEventListener('mousedown', () => {\n      this.dragPointX = stage.mouseX - this.x;\n      this.dragPointY = stage.mouseY - this.y;\n    });\n  },\n\n  handleMove() {\n    this.addEventListener('pressmove', () => {\n      this.x = stage.mouseX - this.dragPointX;\n      this.y = stage.mouseY - this.dragPointY;\n      this.dx = this.x - this.regX;\n      this.dy = this.y - this.regY;\n    });\n  },\n};\n\nObject.assign(CanvasImage.prototype, canvasOperation);\nObject.assign(CanvasText.prototype, canvasOperation);\nObject.assign(CanvasTextGroup.prototype, canvasOperation);\n\nconst canvasBackground = new CanvasBackground();\nconst canvasImage = new CanvasImage();\nconst canvasTextGroup = new CanvasTextGroup();\nconst canvasText = canvasTextGroup.canvasText;\n\nconst loadImage = (file) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = (event) => {\n    canvasImage.image.src = event.target.result;\n  };\n};\n\nconst fileInput = document.getElementById('file');\nfileInput.addEventListener('change', (event) => {\n  const file = event.target.files[0];\n\n  if (!file) return;\n\n  loadImage(file);\n});\n\nconst downloadCanvasImage = () => {\n  const a = document.createElement('a');\n  a.href = this.canvas.toDataURL('image/jpeg', 0.85);\n  a.download = 'download.jpeg';\n  a.click();\n};\n\nconst downloadButton = document.getElementById('download-button');\ndownloadButton.addEventListener('click', () => {\n  downloadCanvasImage();\n});\n\nconst rotateButtons = [...document.querySelectorAll('[data-rotate]')];\nconst scaleButtons = [...document.querySelectorAll('[data-scale]')];\n\nrotateButtons.forEach((rotateButton) => {\n  rotateButton.addEventListener('click', (event) => {\n    const target = event.currentTarget;\n    const canvas = target.dataset.canvas === 'image' ? canvasImage : canvasText;\n\n    if (!canvas.isDrawn) return;\n\n    const direction = target.dataset.rotate;\n    const degees = 15;\n\n    if (direction === 'right') {\n      canvas.rotation += degees;\n    } else if (direction === 'left') {\n      canvas.rotation -= degees;\n    } else {\n      alert('エラー');\n    }\n  });\n});\n\nscaleButtons.forEach((scaleButton) => {\n  scaleButton.addEventListener('click', (event) => {\n    const target = event.currentTarget;\n    const canvas = target.dataset.canvas === 'image' ? canvasImage : canvasText;\n\n    if (!canvas.isDrawn) return;\n\n    const direction = target.dataset.scale;\n    const magnification = 0.2;\n\n    if (direction === 'up') {\n      canvas.scaleX += magnification;\n      canvas.scaleY += magnification;\n    } else if (direction === 'down') {\n      canvas.scaleX -= magnification;\n      canvas.scaleY -= magnification;\n      if (canvas.scaleX < 0.1 && canvas.scaleY < 0.1) {\n        canvas.scaleX = 0.1;\n        canvas.scaleY = 0.1;\n      }\n    } else {\n      alert('エラー');\n    }\n  });\n});\n\nconst textarea = document.getElementById('textarea');\nconst fontRadioButtons = [...document.getElementsByName('fonts')];\n\ntextarea.addEventListener('input', (event) => {\n  if (event.currentTarget.value === '') {\n    canvasText.isDrawn = false;\n    canvasTextGroup.closeButton.image.src = null;\n  } else {\n    canvasText.isDrawn = true;\n    canvasTextGroup.closeButton.image.src = './assets/images/close-icon.png';\n  }\n\n  canvasText.text = event.currentTarget.value;\n  canvasText.regX = canvasText.getBounds().width / 2;\n  canvasText.regY = canvasText.getBounds().height / 2;\n  canvasText.x = canvasText.regX + canvasText.dx;\n  canvasText.y = canvasText.regY + canvasText.dy;\n});\n\nfontRadioButtons.forEach((radio) => {\n  radio.addEventListener('change', (event) => {\n    const fontFamilyName = event.currentTarget.value;\n    canvasText.chageFont(fontFamilyName);\n  });\n});\n\n\n//# sourceURL=webpack://createjs/./src/js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/index.js"]();
/******/ 	
/******/ })()
;